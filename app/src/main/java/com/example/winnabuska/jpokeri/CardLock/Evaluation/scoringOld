package com.example.winnabuska.jpokeri.CardLock.Evaluation;

import com.example.winnabuska.jpokeri.Card;

/**
 * Created by WinNabuska on 6.7.2015.
 */
public class Scoring {
    public final static int MULTIPLIER_OF_NOTHING = 0, MULTIPLIER_OF_TWOPAIRS = 2, MULTIPLIER_OF_THREEOFAKIND = 2, MULTIPLIER_OF_STRAIGHT = 3, MULTIPLIER_OF_FLUSH = 4,
            MULTIPLIER_OF_FULLHOUSE = 8, MULTIPLIER_OF_FOUROFAKIND = 15, MULTIPLIER_OF_STRAIGHTFLUSH = 30, MULTIPLIER_OF_FIVEOFAKIND = 50,
            NOTHING = 0, TWOPAIRS = 1, THREEOFAKIND = 2, STRAIGHT = 3, FLUSH = 4, FULLHOUSE = 5, FOUROFAKIND = 6, STRAIGHTFLUSH = 7, FIVEOFAKIND = 8;

    public final static int [] multipliers = new int [] {MULTIPLIER_OF_NOTHING, MULTIPLIER_OF_TWOPAIRS, MULTIPLIER_OF_THREEOFAKIND, MULTIPLIER_OF_STRAIGHT,
            MULTIPLIER_OF_FLUSH, MULTIPLIER_OF_FULLHOUSE, MULTIPLIER_OF_FOUROFAKIND, MULTIPLIER_OF_STRAIGHTFLUSH, MULTIPLIER_OF_FIVEOFAKIND};
    public final static int [] values = new int []
            {NOTHING, TWOPAIRS, THREEOFAKIND, STRAIGHT, FLUSH, FULLHOUSE, FOUROFAKIND, STRAIGHTFLUSH, FIVEOFAKIND};
    public static String [] winHandNames;

    private final byte SUIT_JOKER = Card.SUIT_JOKER, VALUE_JOKER = Card.VALUE_JOKER, VALUE_ACE_LOW = Card.VALUE_ACE_LOW, VALUE_ACE_HIGH = Card.VALUE_ACE_HIGH;

    public static void setWinHandNames(String [] names){
        Scoring.winHandNames = names;
    }

    public int getHandRanking(Card[] cards){
        byte [] cardValues = new byte[15];
        byte [] handSuits = new byte[5];
        boolean hasExtraPare = false;
        boolean couldBeStraight = true;
        boolean isFlush = true; //Until proven otherwsise
        byte currentValue;
        byte currentSuit;
        byte mostSameValue = 1;
        for (byte i = 0; i<5; i++) {
            currentValue = cards[i].value;
            currentSuit = cards[i].suit;
            cardValues[currentValue]++;
            //Could be a pare, threes or fours
            if(mostSameValue<cardValues[currentValue]){
                mostSameValue = cardValues[currentValue];
                couldBeStraight = false;
                isFlush = false;

            }else if(cardValues[currentValue]>1){
                hasExtraPare=true;
            }

            //Not all handValues will be counted in case isFlush becomes false during iteration.
            //When this method, to get the number of joker in current hand in a reliable way, use Card.VALUES_JOKER, instead of Card.SUITE_JOKER
            if(isFlush){
                if(++handSuits[currentSuit]>(i-handSuits[SUIT_JOKER]) || currentSuit == SUIT_JOKER){
                    continue;
                }else{
                    isFlush = false;
                }
            }
        }

        cardValues[VALUE_ACE_HIGH] = cardValues[VALUE_ACE_LOW];

        //Note that using hansSuits[Card.SUITE_JOKER] is not a reliable way to get the number of jokers,
        //because isFlush could have been called before the last handSuits has been added
        //To get the number of jokers use handValues[VALUE_JOKER]
        if(couldBeStraight){
            if(cardValues[VALUE_JOKER] == 0){
                if(isStraightNoJoker(cardValues)){
                    if(isFlush)
                        return Scoring.STRAIGHTFLUSH;
                    else
                        return Scoring.STRAIGHT;
                }
                //Has joker
                else{
                    if(isFlush)
                        return Scoring.FLUSH;
                    else
                        return Scoring.NOTHING;
                }
            }
            else{
                if(isFlush){
                    if(isStraightHasJoker(cardValues)){
                        return Scoring.STRAIGHTFLUSH;
                    }
                    else
                        return Scoring.FLUSH;
                }
                else{
                    if(isStraightHasJoker(cardValues))
                        return Scoring.STRAIGHT;
                    else
                        return Scoring.NOTHING;
                }
            }
        }
        else{
            mostSameValue += cardValues[VALUE_JOKER];//plus jokers
            if(mostSameValue == 2){
                if(hasExtraPare)
                    return Scoring.TWOPAIRS;
                else
                    return Scoring.NOTHING;
            }
            else if(mostSameValue == 3){
                if(hasExtraPare)
                    return Scoring.FULLHOUSE;
                else
                    return Scoring.THREEOFAKIND;
            }
            else if(mostSameValue == 4){
                return Scoring.FOUROFAKIND;
            }
            else if(mostSameValue == 5){
                return Scoring.FIVEOFAKIND;
            }
            else{
                return 8;
            }
        }
    }

    private boolean isStraightNoJoker(byte [] cardValues){
        byte length = (byte)cardValues.length;
        byte straight = 0;
        for(byte i = 1; i<length; i++){
            if(cardValues[i]==1){
                if(++straight==5)
                    return true;
            }else if(straight!=0){
                if(i==2){
                    straight=0;
                    continue;
                }
                else
                    return false;
            }
        }
        return false;
    }

    //This method should only be run after it is for sure there are no same value cards in hand
    private boolean isStraightHasJoker(byte [] cardValues){
        int singlesWithinFive = 0;
        int maxSinglesWithinFive = 0;
        for(int i = 1; i<11; i++){
            int limit = i+5;
            for(int j = i; j<limit; j++){
                singlesWithinFive+=cardValues[j];
            }
            if(singlesWithinFive==4)
                return true;
            else if(singlesWithinFive<maxSinglesWithinFive){
                //Special case of ACE that is both values 1 and 14
                if((i-1)!=VALUE_ACE_LOW){
                    return false;
                }
            }
            maxSinglesWithinFive = singlesWithinFive;
            singlesWithinFive=0;
        }
        return false;
    }


    public static int getWinValueByRanking(int index){
        return values[index];
    }

    public double getValue(Card [] cards){
        int ranking = getHandRanking(cards);
        if(ranking>=0)  return values[ranking];
        else            return 0;
    }
}